import unittest
from unittest.mock import Mock
import telethon.tl.types
import sys
import os

# Add the project root to the path so we can import the module
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from news_digest.core.telegram import format_telegram_message


class TestFormatTelegramMessage(unittest.TestCase):
    def test_format_telegram_message_with_entities(self):
        """Test format_telegram_message with the specified text and entities."""
        
        # Create mock message text
        message_text = """üéôÔ∏è ¬´–ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∏–¥–∏–æ—Ç–æ–º ‚Äì –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π –≤ –∂–∏–∑–Ω–∏¬ª. –ò–Ω—Ç–µ—Ä–≤—å—é —Å –õ–µ–≤–æ–Ω–æ–º –ê—Ä–æ–Ω—è–Ω–æ–º

–í –≥–æ—Å—Ç—è—Ö —É Levitov Chess ‚Äì —Ç—Ä–∏—É–º—Ñ–∞—Ç–æ—Ä —ç—Ç–∞–ø–∞ Freestyle Chess Grand Slam –≤ –õ–∞—Å-–í–µ–≥–∞—Å–µ –õ–µ–≤–æ–Ω –ê—Ä–æ–Ω—è–Ω!

–ù–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ –ê—Ä–æ–Ω—è–Ω —Å—ã–≥—Ä–∞–ª –º–∞—Ç—á –ø—Ä–æ—Ç–∏–≤ –í—ç—è –ò –∏ —Ä–∞–∑–≥—Ä–æ–º–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–ª, –≤ –æ–¥–Ω–æ–π –∏–∑ –ø–∞—Ä—Ç–∏–π –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏–≤ —Å–ª–æ–Ω–∞ –≤ –æ–¥–∏–Ω —Ö–æ–¥. –ö–∞–∫ —Å–∫–∞–∑–∞–ª —Å–∞–º –õ–µ–≤–æ–Ω, "–æ–±—ã—á–Ω–æ —É—Å–ø–µ—Ö–∏ ‚Äì —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É—Å–ø–µ—Ö–æ–≤": —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –ø–æ–º–æ–≥–ª–∞ –ê—Ä–æ–Ω—è–Ω—É –Ω–∞–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É –∏ –±–ª–µ—Å—Ç—è—â–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –õ–∞—Å-–í–µ–≥–∞—Å–µ —Å —Å–æ–ø
–µ—Ä–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–¥—è—Ç—Å—è –µ–º—É –≤ —Å—ã–Ω–æ–≤—å—è!

–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, —É —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π ‚Äì —Ä–∞–∑–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –æ–ø—ã—Ç–Ω—ã–µ –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä—ã –≥–¥–µ-—Ç–æ –∏–≥—Ä–∞—é—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, –∞ —é–Ω—ã–µ –¥–∞—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–∞—é—Ç—Å—è –≤—ã—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞, –Ω–µ –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏. –í–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞—Ö–º–∞—Ç–∞—Ö –§–∏—à–µ—Ä–∞?

–û —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ñ—Ä–∏—Å—Ç–∞–π–ª–æ–º, –æ–¥–Ω–æ–π –∏–∑ –ª—É—á—à–∏—Ö –ø–∞—Ä—Ç–∏–π –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –æ —Å–µ–∫—Ä–µ—Ç–µ —É—Å–ø–µ—Ö–∞, –∫–∞–∫ –ø–æ—Å–ª–µ —Å–æ—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É –≤ —ç–ª–∏—Ç–µ ‚Äì –≤ –Ω–æ–≤–æ–º –≤–∏–¥–µ–æ —Ä—É–±—Ä–∏–∫–∏ "–ü–æ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏"!

#–ø–æ_–ø–µ—Ä–≤–æ–π_–ª–∏–Ω–∏–∏ #–∏–Ω—Ç–µ—Ä–≤—å—é"""

        # Create mock entities
        entities = [
            Mock(offset=3, length=101, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=150, length=26, __class__=telethon.tl.types.MessageEntityItalic),
            Mock(offset=190, length=12, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=218, length=6, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=244, length=5, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=340, length=5, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=418, length=7, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=915, length=11, url="https://example.com", __class__=telethon.tl.types.MessageEntityTextUrl),
            Mock(offset=955, length=16, __class__=telethon.tl.types.MessageEntityHashtag),
            Mock(offset=972, length=9, __class__=telethon.tl.types.MessageEntityHashtag),
        ]

        # Create mock post object
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = entities

        # Call the function
        result = format_telegram_message(mock_post)

        # Assert the exact output that the function produces
        expected = """üéôÔ∏è <b>¬´–ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∏–¥–∏–æ—Ç–æ–º ‚Äì –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π –≤ –∂–∏–∑–Ω–∏¬ª. –ò–Ω—Ç–µ—Ä–≤—å—é —Å –õ–µ–≤–æ–Ω–æ–º –ê—Ä–æ–Ω—è–Ω–æ–º<br>
</b><br>
–í –≥–æ—Å—Ç—è—Ö —É Levitov Chess ‚Äì —Ç—Ä–∏—É–º—Ñ–∞—Ç–æ—Ä —ç—Ç–∞–ø–∞ F<i>reestyle Chess Grand Slam </i>–≤ –õ–∞—Å-–í–µ–≥–∞—Å–µ –õ<b>–µ–≤–æ–Ω –ê—Ä–æ–Ω—è–Ω!</b><br>
<br>
–ù–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ –ê<b>—Ä–æ–Ω—è–Ω </b>—Å—ã–≥—Ä–∞–ª –º–∞—Ç—á –ø—Ä–æ—Ç–∏–≤ –í<b>—ç—è –ò </b>–∏ —Ä–∞–∑–≥—Ä–æ–º–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–ª, –≤ –æ–¥–Ω–æ–π –∏–∑ –ø–∞—Ä—Ç–∏–π –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏–≤ —Å–ª–æ–Ω–∞ –≤ –æ–¥–∏–Ω —Ö–æ–¥. –ö–∞–∫ —Å–∫–∞–∑–∞–ª —Å–∞–º –õ<b>–µ–≤–æ–Ω,</b> "–æ–±—ã—á–Ω–æ —É—Å–ø–µ—Ö–∏ ‚Äì —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É—Å–ø–µ—Ö–æ–≤": —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –ø–æ–º–æ–≥–ª–∞ –ê<b>—Ä–æ–Ω—è–Ω—É </b>–Ω–∞–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É –∏ –±–ª–µ—Å—Ç—è—â–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –õ–∞—Å-–í–µ–≥–∞—Å–µ —Å —Å–æ–ø<br>
–µ—Ä–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–¥—è—Ç—Å—è –µ–º—É –≤ —Å—ã–Ω–æ–≤—å—è!<br>
<br>
–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, —É —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π ‚Äì —Ä–∞–∑–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –æ–ø—ã—Ç–Ω—ã–µ –≥—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä—ã –≥–¥–µ-—Ç–æ –∏–≥—Ä–∞—é—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, –∞ —é–Ω—ã–µ –¥–∞—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–∞—é—Ç—Å—è –≤—ã—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞, –Ω–µ –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏. –í–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞—Ö–º–∞—Ç–∞—Ö –§–∏—à–µ—Ä–∞?<br>
<br>
–û —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ñ—Ä–∏—Å—Ç–∞–π–ª–æ–º, –æ–¥–Ω–æ–π –∏–∑ –ª—É—á—à–∏—Ö –ø–∞—Ä—Ç–∏–π –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –æ —Å–µ–∫—Ä–µ—Ç–µ —É—Å–ø–µ—Ö–∞, –∫–∞–∫ –ø–æ—Å–ª–µ —Å–æ—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É –≤ —ç–ª–∏—Ç–µ ‚Äì –≤ <a href='https://example.com'>–Ω–æ–≤–æ–º –≤–∏–¥–µ–æ</a> —Ä—É–±—Ä–∏–∫–∏ "–ü–æ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏"!<br>
<br>
#–ø–æ_–ø–µ—Ä–≤–æ–π_–ª–∏–Ω–∏–∏ #–∏–Ω—Ç–µ—Ä–≤—å—é"""
        
        self.assertEqual(result, expected)

    def test_format_telegram_message_detailed_output(self):
        """Test format_telegram_message with detailed output verification."""
        
        # Create a test case that matches the entity offsets and lengths
        message_text = "Hello bold text and italic text"
        
        entities = [
            Mock(offset=6, length=9, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=22, length=11, __class__=telethon.tl.types.MessageEntityItalic),
        ]
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = entities
        
        result = format_telegram_message(mock_post)
        
        # Assert the exact output that the function produces
        expected = "Hello <b>bold text</b> and it<i>alic text</i>"
        self.assertEqual(result, expected)

    def test_format_telegram_message_no_entities(self):
        """Test format_telegram_message with no entities."""
        
        message_text = "Simple message\nwith newlines"
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = []

        result = format_telegram_message(mock_post)

        # Should only convert newlines to <br> tags
        expected = "Simple message<br>\nwith newlines"
        self.assertEqual(result, expected)

    def test_format_telegram_message_with_mention(self):
        """Test format_telegram_message with a mention entity."""
        
        message_text = "Hello @username how are you?"
        
        mention_entity = Mock(
            offset=6, 
            length=9, 
            __class__=telethon.tl.types.MessageEntityMention
        )
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = [mention_entity]

        result = format_telegram_message(mock_post)

        # Should create a link to t.me (note: uses single quotes)
        self.assertIn("<a href='https://t.me/username'>", result)
        self.assertIn('@username', result)
        self.assertIn('</a>', result)

    def test_format_telegram_message_with_url(self):
        """Test format_telegram_message with a URL entity."""
        
        message_text = "Check out https://example.com for more info"
        
        url_entity = Mock(
            offset=10, 
            length=19, 
            __class__=telethon.tl.types.MessageEntityUrl
        )
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = [url_entity]

        result = format_telegram_message(mock_post)

        # Should create a link (note: uses single quotes)
        self.assertIn("<a href='https://example.com'>", result)
        self.assertIn('https://example.com', result)
        self.assertIn('</a>', result)

    def test_format_telegram_message_with_strike(self):
        """Test format_telegram_message with a strike entity."""
        
        message_text = "This text should be struck through"
        
        strike_entity = Mock(
            offset=5, 
            length=4, 
            __class__=telethon.tl.types.MessageEntityStrike
        )
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = [strike_entity]

        result = format_telegram_message(mock_post)

        # Should create strike tags
        self.assertIn('<s>', result)
        self.assertIn('</s>', result)
        self.assertIn('text', result)

    def test_format_telegram_message_with_custom_emoji(self):
        """Test format_telegram_message with a custom emoji entity."""
        
        message_text = "Hello üòÄ world"
        
        emoji_entity = Mock(
            offset=6, 
            length=2, 
            __class__=telethon.tl.types.MessageEntityCustomEmoji
        )
        
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = [emoji_entity]

        result = format_telegram_message(mock_post)

        # Custom emoji should be handled (currently just adds offset, doesn't modify text)
        # The emoji should still be present in the result
        self.assertIn('üòÄ', result)


if __name__ == '__main__':
    unittest.main() 