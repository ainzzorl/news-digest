import unittest
from unittest.mock import Mock
import telethon.tl.types
import sys
import os

# Add the project root to the path so we can import the module
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from news_digest.core.telegram import format_telegram_message


class TestFormatTelegramMessage(unittest.TestCase):
    def test_format_telegram_message_with_entities(self):
        """Test format_telegram_message with the specified text and entities."""

        # Create mock message text
        message_text = """üéôÔ∏è–§–∞–±–∏–∞–Ω–æ –ö–∞—Ä—É–∞–Ω–∞: ¬´–Ø –¥—É–º–∞–ª, —á—Ç–æ –±—É–¥–µ—Ç –∫–∞–∫–æ–π-—Ç–æ —à–µ–ø–æ—Ç –≤ –∑–∞–ª–µ,¬†–≤¬†—Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∂–µ –±—ã–ª–∏ –≤–æ–ø–ª–∏¬ª

–í –Ω–∞—à—É–º–µ–≤—à–µ–º –≤–∏–¥–µ–æ —Å –∫—Ä–∏—Ç–∏–∫–æ–π —Å–µ—Ä–∏–∏ Freestyle Chess –•–∏–∫–∞—Ä—É –ù–∞–∫–∞–º—É—Ä–∞ —É–ø–æ–º—è–Ω—É–ª, —á—Ç–æ –µ–≥–æ –∫–æ–ª–ª–µ–≥–∞ –§–∞–±–∏–∞–Ω–æ –ö–∞—Ä—É–∞–Ω–∞ —É–∂–µ –≤—ã—Ä–∞–∂–∞–ª —Å—Ö–æ–∂—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–≤—å—é, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –Ω–æ –ø–æ–∑–¥–Ω–µ–µ —Å—Ç—Ä–∞–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏—Å—á–µ–∑–ª–æ"""

        # Create mock entities
        entities = [
            Mock(offset=3, length=87, __class__=telethon.tl.types.MessageEntityBold),
            Mock(
                offset=105,
                length=5,
                url="https://youtu.be/pOVsGE1u8Ps",
                __class__=telethon.tl.types.MessageEntityTextUrl,
            ),
            Mock(
                offset=128, length=15, __class__=telethon.tl.types.MessageEntityItalic
            ),
            Mock(offset=144, length=16, __class__=telethon.tl.types.MessageEntityBold),
            Mock(offset=186, length=15, __class__=telethon.tl.types.MessageEntityBold),
        ]

        # Create mock post object
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = entities

        # Call the function
        result = format_telegram_message(mock_post)

        # Assert the exact output that the function produces
        expected = """üéôÔ∏è<b>–§–∞–±–∏–∞–Ω–æ –ö–∞—Ä—É–∞–Ω–∞: ¬´–Ø –¥—É–º–∞–ª, —á—Ç–æ –±—É–¥–µ—Ç –∫–∞–∫–æ–π-—Ç–æ —à–µ–ø–æ—Ç –≤ –∑–∞–ª–µ,¬†–≤¬†—Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∂–µ –±—ã–ª–∏ –≤–æ–ø–ª–∏¬ª</b><br>
<br>
–í –Ω–∞—à—É–º–µ–≤—à–µ–º <a href='https://youtu.be/pOVsGE1u8Ps'>–≤–∏–¥–µ–æ</a> —Å –∫—Ä–∏—Ç–∏–∫–æ–π —Å–µ—Ä–∏–∏ <i>Freestyle Chess</i> <b>–•–∏–∫–∞—Ä—É –ù–∞–∫–∞–º—É—Ä–∞ </b>—É–ø–æ–º—è–Ω—É–ª, —á—Ç–æ –µ–≥–æ –∫–æ–ª–ª–µ–≥–∞ <b>–§–∞–±–∏–∞–Ω–æ –ö–∞—Ä—É–∞–Ω–∞</b> —É–∂–µ –≤—ã—Ä–∞–∂–∞–ª —Å—Ö–æ–∂—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–≤—å—é, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –Ω–æ –ø–æ–∑–¥–Ω–µ–µ —Å—Ç—Ä–∞–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏—Å—á–µ–∑–ª–æ"""

        self.assertEqual(result, expected)

    def test_format_telegram_message_with_entities_2(self):
        """Test format_telegram_message with the specified text and entities."""

        # Create mock message text
        message_text = """–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ 27 –∏—é–ª—è

‚úπ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –∞—Ç–∞–∫–æ–≤–∞–Ω–∞ –¥—Ä–æ–Ω–∞–º–∏. –í –ü—É–ª–∫–æ–≤–æ –∑–∞–¥–µ—Ä–∂–∞–ª–∏—Å—å –¥–µ—Å—è—Ç–∫–∏ —Ä–µ–π—Å–æ–≤. –ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ ¬´—á–∞—Å—Ç–∏—á–Ω–æ–º –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞¬ª"""

        # Create mock entities
        entities = [
            Mock(offset=0, length=23, __class__=telethon.tl.types.MessageEntityBold),
            Mock(
                offset=49,
                length=9,
                url="https://bit.ly/meduzamirror",
                __class__=telethon.tl.types.MessageEntityTextUrl,
            ),
        ]

        # Create mock post object
        mock_post = Mock()
        mock_post.message = message_text
        mock_post.entities = entities

        # Call the function
        result = format_telegram_message(mock_post)

        # Assert the exact output that the function produces
        expected = """<b>–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ 27 –∏—é–ª—è</b><br>
<br>
‚úπ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å <a href='https://bit.ly/meduzamirror'>–∞—Ç–∞–∫–æ–≤–∞–Ω–∞</a> –¥—Ä–æ–Ω–∞–º–∏. –í –ü—É–ª–∫–æ–≤–æ –∑–∞–¥–µ—Ä–∂–∞–ª–∏—Å—å –¥–µ—Å—è—Ç–∫–∏ —Ä–µ–π—Å–æ–≤. –ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ ¬´—á–∞—Å—Ç–∏—á–Ω–æ–º –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞¬ª"""

        self.assertEqual(result, expected)


if __name__ == "__main__":
    unittest.main()
